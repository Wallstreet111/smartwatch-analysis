---
title: "Smartwatch analysis"
author: "Wallstreet Petrus-Nihi"
---

# Smartwatch Data Analysis Using R

## Introduction

In the competitive smartwatch industry, smartwatches are favored by fitness enthusiasts who use them to monitor their health. Analyzing fitness data collected from smartwatches is a practical application of Data Science in healthcare. This notebook will guide you through the process of analyzing smartwatch fitness data using R.

## Predict Clinical Test Results

Wearable devices can provide early warning signals for underlying health issues. With the growing popularity of smartwatches and fitness trackers, these devices hold significant potential for monitoring and predicting health conditions.

“Consumer wearable devices have enormous untapped potential to facilitate the monitoring—and potentially, the prediction—of human health and disease,” said Grace Peng, Ph.D., director of the NIBIB program in Mathematical Modeling, Simulation, and Analysis. “This study, which investigates how data from smartwatches are associated with clinical laboratory tests, is an important step forward in this burgeoning field.”

*Reference: National Institute of Biomedical Imaging and Bioengineering (NIBIB)*

## Intelligent Health Management

Intelligent health management leverages the analysis of big data collected from wearable devices. Based on modern health concepts, advanced medical models, and preventive treatment theories, health management services aim to maintain and improve health, promote healthy lifestyles, reduce disease risks, and help individuals stay away from diseases. Health management, by monitoring and evaluating risk factors, provides targeted interventions to prevent the onset and progression of diseases.

The COVID-19 pandemic has underscored the importance of health management, highlighting its role in monitoring, evaluating, and intervening in disease risk factors to maintain overall health.

*Reference: ScienceDirect*

## Dataset

This dataset was generated by respondents to a distributed survey via Amazon Mechanical Turk between 03.12.2016 and 05.12.2016. Thirty eligible Fitbit users consented to the submission of personal tracker data, including minute-level output for physical activity, heart rate, and sleep monitoring. Individual reports can be parsed by export session ID (column A) or timestamp (column B). Variation between outputs represents the use of different types of Fitbit trackers and individual tracking behaviors/preferences.

## Import Libraries

```{r firstplot,echo=FALSE,warning=FALSE, message=FALSE}
library(tidyverse)
library(lubridate)
library(plotly)
```

## Read Data

```{r secondplot, echo=FALSE,warning=FALSE, message=FALSE}

data <- read_csv("C:/Apps/Smartwatch/dailyActivity_merged.csv")

print(head(data)) 
```

## Null Values

```{r thirdplot,echo=FALSE,warning=FALSE, message=FALSE}
print(sum(is.na(data)))
```

So the dataset does not have any null values.

Let’s have a look at the information about columns in the dataset:

```{r fourthplot, echo=FALSE,warning=FALSE, message=FALSE}
print(glimpse(data))
```

The column containing the date of the record is a character. We may need to use dates in our analysis, so let’s convert this column into a date column:

```{r fifthplot, echo=FALSE,warning=FALSE, message=FALSE}
data <- data %>%
  mutate(ActivityDate = mdy(ActivityDate))
print(glimpse(data))
```

Look carefully at all the columns. You will see information about very active, moderately active, lightly active, and inactive minutes in the dataset.

Let's combine all these columns into total minutes before moving forward:

```{r sixthplot, echo=FALSE,warning=FALSE, message=FALSE}
data <- data %>%
  mutate(TotalMinutes = VeryActiveMinutes + FairlyActiveMinutes + LightlyActiveMinutes + SedentaryMinutes)
print(sample(data$TotalMinutes, 5))
```

Let’s take a look at the descriptive statistics of the dataset:

```{r seventhplot, echo=FALSE, message=FALSE}
print(summary(data)) 
```

## Analyze the Calories

The dataset has a “Calories” column; it contains the data about the number of calories burned in a day.

Let’s have a look at the relationship between calories burned and the total steps walked in a day:

```{r eigthplot, echo=FALSE,warning=FALSE, message=FALSE}
p <- ggplot(data, aes(x=Calories, y=TotalSteps, size=VeryActiveMinutes)) +
  geom_point(alpha=0.5) +
  geom_smooth(method=lm, se=FALSE) +
  labs(title="Relationship between Calories & Total Steps")
ggplotly(p)

```

You can see that there is a linear relationship between the total number of steps and the number of calories burned in a day.

Let’s look at the average total number of active minutes in a day:

```{r ninthplot, echo=FALSE,warning=FALSE, message=FALSE}
counts <- colMeans(data %>% select(VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes, SedentaryMinutes))
label <- c("Very Active Minutes", "Fairly Active Minutes", "Lightly Active Minutes", "Inactive Minutes")
colors <- c('gold', 'lightgreen', "pink", "blue")

fig <- plot_ly(labels = label, values = counts, type = 'pie', textinfo = 'label+percent', marker = list(colors = colors, line = list(color = 'black', width = 3))) %>%
  layout(title = 'Total Active Minutes')
fig

```

### Chart Observations:

-   81.3% of all inactive minutes in a day

-   15.8% of sedentary minutes per day

-   On average, only 21 minutes (1.74%) were very active

-   1.11% (13 minutes) of relatively active minutes per day

Transformed the data type of the ActivityDate column to the datetime column above.

Let’s use it to find the weekdays of the records and add a new column to this dataset as “Day”:

```{r tenthplot, echo=FALSE,warning=FALSE, message=FALSE}
data <- data %>%
  mutate(Day = wday(ActivityDate, label = TRUE, abbr = FALSE))
print(head(data$Day))

```

Let’s have a look at the very active, fairly active, and lightly active minutes on each day of the week:

```{r eleventhplot, echo=FALSE,warning=FALSE, message=FALSE}
p <- ggplot(data, aes(x=Day)) +
  geom_bar(aes(y=VeryActiveMinutes), stat="identity", fill="purple") +
  geom_bar(aes(y=FairlyActiveMinutes), stat="identity", fill="green") +
  geom_bar(aes(y=LightlyActiveMinutes), stat="identity", fill="pink") +
  labs(title="Active Minutes by Day of the Week") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p) 

```

Let’s have a look at the number of inactive minutes on each day of the week:

```{r twelvelthplot, echo=FALSE,warning=FALSE, message=FALSE}
fig <- plot_ly(data, labels = ~Day, values = ~SedentaryMinutes, type = 'pie', textinfo = 'label+percent', marker = list(colors = colors, line = list(color = 'black', width = 3))) %>%
  layout(title = 'Inactive Minutes by Day of the Week')
fig

```

So Thursday is the most inactive day according to the lifestyle of all the individuals in the dataset.

Now let’s have a look at the number of calories burned on each day of the week:

```{r thirteenthplot,, echo=FALSE,warning=FALSE, message=FALSE}
fig <- plot_ly(data, labels = ~Day, values = ~Calories, type = 'pie', textinfo = 'label+percent', marker = list(colors = colors, line = list(color = 'black', width = 3))) %>%
  layout(title = 'Calories Burned by Day of the Week')
fig
```

Tuesday is, therefore, one of the most active days for all individuals in the dataset, as the highest number of calories were burned on Tuesdays.
